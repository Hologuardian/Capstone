#pragma kernel SetUpErosion
#pragma kernel Rainfall
#pragma kernel FlowSetup
#pragma kernel WaterMotion
#pragma kernel Evaporation
 
Texture2D<float4> Input;
RWTexture2D<float4> Result;
// R  , T  , L  , B
// x+1, y+1, x-1, y-1
RWTexture2D<float4> Flow;


[numthreads(8, 8, 1)]
void SetUpErosion(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = float4(Input[id.xy].r, 0, 0.0f, 1);
    Flow[id.xy] = float4(0.0f, 0.0f, 0.0f, 0.0f);
}

[numthreads(8, 8, 1)]
void Rainfall(uint3 id : SV_DispatchThreadID)
{
    float deltaTime = 0.05f;

    Result[id.xy] += float4(0, 0, Input[id.xy].b * deltaTime, 0);
}

[numthreads(8, 8, 1)]
void FlowSetup (uint3 id : SV_DispatchThreadID)
{
    float deltaTime = 0.05f;
    float A = 2.0f;
    float l = 1.0;

    float2 deltaHeightR2 = (Result[id.xy].rb) - (Result[id.xy + float2(1, 0)].rb);
    float deltaHeightR = abs(deltaHeightR2.x) + abs(deltaHeightR2.y);
    float flowR = max(0, Flow[id.xy].x) + deltaTime * A * (9.81f * deltaHeightR) / l;

    float2 deltaHeightT2 = (Result[id.xy].rb) - (Result[id.xy + float2(0, 1)].rb);
    float deltaHeightT = abs(deltaHeightT2.x) + abs(deltaHeightT2.y);
    float flowT = max(0, Flow[id.xy].y) + deltaTime * A * (9.81f * deltaHeightT) / l;

    float2 deltaHeightL2 = (Result[id.xy].rb) - (Result[id.xy + float2(-1, 0)].rb);
    float deltaHeightL = abs(deltaHeightL2.x) + abs(deltaHeightL2.y);
    float flowL = max(0, Flow[id.xy].z) + deltaTime * A * (9.81f * deltaHeightL) / l;

    float2 deltaHeightB2 = (Result[id.xy].rb) - (Result[id.xy + float2(0, -1)].rb);
    float deltaHeightB = abs(deltaHeightB2.x) + abs(deltaHeightB2.y);
    float flowB = max(0, Flow[id.xy].w) + deltaTime * A * (9.81f * deltaHeightB) / l;

    Flow[id.xy] = float4(flowR, flowT, flowL, flowB);

    float K = min(1, (Result[id.xy].b) / ((Flow[id.xy].x + Flow[id.xy].y + Flow[id.xy].z + Flow[id.xy].w) * deltaTime));

    Flow[id.xy] *= K;
}

[numthreads(8, 8, 1)]
void WaterMotion(uint3 id : SV_DispatchThreadID)
{
    float deltaTime = 0.05f;
    float A = 2.0f;
    float l = 1.0F;

    float V = deltaTime * (Flow[id.xy + float2(1, 0)].z +
                           Flow[id.xy + float2(0, 1)].w +
                           Flow[id.xy + float2(-1, 0)].x +
                           Flow[id.xy + float2(0, -1)].y -
                           (Flow[id.xy].x + Flow[id.xy].y + Flow[id.xy].z + Flow[id.xy].w));

    float d2 = Result[id.xy].b + V / (l * l);

    float dAvg = (Result[id.xy].b + d2) / 2;

    Result[id.xy] = float4(Result[id.xy].r, Result[id.xy].g, d2, Result[id.xy].a);

    float WaterDeltaX = ((Flow[id.xy + float2(-1, 0)].x - Flow[id.xy].z) + (Flow[id.xy].x - Flow[id.xy + float2(1, 0)].z)) / 2;
    float WaterDeltaY = ((Flow[id.xy + float2(0, -1)].y - Flow[id.xy].w) + (Flow[id.xy].y - Flow[id.xy + float2(0, 1)].w)) / 2;


}

[numthreads(8, 8, 1)]
void Evaporation(uint3 id : SV_DispatchThreadID)
{
    float deltaTime = 0.05f;

    Result[id.xy] = float4(Result[id.xy].r, Result[id.xy].g, Result[id.xy].b - Input[id.xy].g * deltaTime, Result[id.xy].a);
}